


echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a
/etc/apt/sources.list.d/kubernetes.list sudo apt-get update
sudo apt-get install -y kubectl



2.	Switch to jenkins user

 sudo -i -u jenkins	

3.	Create .kube folder in Jenkins home directory

cd ~
mkdir .kube

4.	Create config file and copy config file content from Kubernetes Cluster master machine and save the content.

vi .kube/config	

5. We can use kubectl commands directly in pipe line script , kubectl commands will get executed in Kubernetes cluster directly.

stage("Deploy To Kuberates Cluster"){
sh "kubectl apply -f springBootMongo.yml"
}


====================================================
Jenkins Pipeline script for complete CI-CD
==============================
node{
    
    stage("Git Clone"){
        git credentialsId: 'GIT_CREDENTIALS', url: 'https://github.com/saidu007/mithun_spring-boot-mongo-docker.git'
        
    }
    stage("Maven Clean Build"){
        
        def mavenHome = tool name: "Maven-3.6.3", type: "maven"
        def mavenCMD= "${mavenHome}/bin/mvn "
        sh "${mavenCMD} clean package"
        
    }
    
    stage("Build docker image"){
        sh "docker build -t saidu007/spring-boot-mongo ."
    }
    
    stage("Docker Push"){
        
          
          sh "docker login -u saidu007 -p !Siddukala2015 "
        
            sh "docker push saidu007/spring-boot-mongo "
    }
    /**
    stage("Deploy Application in k8s Cluster"){
        kubernetesDeploy(
            configs: 'springBootMongo.yml',
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
            )
    }
    **/
    stage("Deploy to kubernetes cluster"){
        sh 'kubectl apply -f springBootMongo.yml'
    }
}

